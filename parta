***********************************Sharedmemory***************************************
    #include<stdio.h>  
    #include<stdlib.h>  
    #include<unistd.h>  
    #include<sys/shm.h>  
    #include<string.h>  
    int main()  
    {  
    int i;  
    void *shared_memory;  
    char buff[100];  
    int shmid;  
    shmid=shmget((key_t)2345, 1024, 0666|IPC_CREAT);   
    //creates shared memory segment with key 2345, having size 1024 bytes. IPC_CREAT is used to create the shared segment if it does not exist. 0666 are the permissions on the shared segment  
    printf("Key of shared memory is %d\n",shmid);  
    shared_memory=shmat(shmid,NULL,0);   
    //process attached to shared memory segment  
    printf("Process attached at %p\n",shared_memory);   
    //this prints the address where the segment is attached with this process  
    printf("Enter some data to write to shared memory\n");  
    read(0,buff,100); //get some input from user  
    strcpy(shared_memory,buff); //data written to shared memory  
    printf("You wrote : %s\n",(char *)shared_memory);  
    }  
    -------------------
        #include<stdio.h>  
    #include<stdlib.h>  
    #include<unistd.h>  
    #include<sys/shm.h>  
    #include<string.h>  
    int main()  
    {  
    int i;  
    void *shared_memory;  
    char buff[100];  
    int shmid;  
    shmid=shmget((key_t)2345, 1024, 0666);  
    printf("Key of shared memory is %d\n",shmid);  
    shared_memory=shmat(shmid,NULL,0); //process attached to shared memory segment  
    printf("Process attached at %p\n",shared_memory);  
    printf("Data read from shared memory is : %s\n",(char *)shared_memory);  
    }  
 ********************************messagepassing********************
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#define MAX 10
 // structure for message queue
struct mesg_buffer {
    long mesg_type;
    char mesg_text[100];
} message; 
int main()
{
    key_t key;
    int msgid; 
    // ftok to generate unique key
    key = ftok("progfile", 65);
    // msgget creates a message queue
    // and returns identifier
    msgid = msgget(key, 0666 | IPC_CREAT);
    message.mesg_type = 1;
    printf("Write Data : ");
    fgets(message.mesg_text,MAX,stdin);
    // msgsnd to send message
    msgsnd(msgid, &message, sizeof(message), 0);
    // display the message
    printf("Data send is : %s \n", message.mesg_text);
    return 0;
}
-----------------------
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>
// structure for message queue
struct mesg_buffer {
    long mesg_type;
    char mesg_text[100];
} message;  
int main()
{
    key_t key;
    int msgid;
    // ftok to generate unique key
    key = ftok("progfile", 65);
    // msgget creates a message queue
    // and returns identifier
    msgid = msgget(key, 0666 | IPC_CREAT);
    // msgrcv to receive message
    msgrcv(msgid, &message, sizeof(message), 1, 0);
    // display the message
    printf("Data Received is : %s \n",message.mesg_text);
    // to destroy the message queue
    msgctl(msgid, IPC_RMID, NULL);
    return 0;
}
********************************Linkedlist**********************************
#include<stdio.h>
#include<stdlib.h>
typedef struct node Node;
struct node{
int data;
Node *next;
}*tail,*head,*newnode,*temp;
int main()
{    
int ch=0;  
 while(ch<4) 
    {    
        printf("\nEnter choice:");  
       printf("\n1.Insert\n2.Delete\n3.Display\n");       
       scanf("%d",&ch);        
       switch(ch)       
        {            
        case 1:insert();break;            
        case 2:deleted();break;            
        case 3:display();break;            
        default: printf("THANK YOU");        
        }    
        }    
        return 0;
}
void insert(int data)
{    
int ch;    
Node * newnode=(Node*)malloc(sizeof(Node));    
printf("Enter data\n");    
scanf("%d",&newnode->data);    
newnode->next=NULL;    
if(head==NULL)    
{        
head=newnode;        
tail=newnode;    
}    
else    
{
  newnode->next=head;        
  head=newnode
}
}
void deleted()
{   
int ch;    
temp=head;    
if(temp==NULL)    
{        
printf("Empty");            
}    
else if(head==tail)    
{        
printf("Deleted is %d \n",temp->data);        
free(temp);        
head=NULL;        
tail=NULL;
}    
else    
{        
head=head->next;        
printf("Deleted is %d \n",temp->data);        
temp->next=NULL;        
free(temp);
}
}
void display()
{    
int ch;    
temp=head;    
if(temp==NULL)    
{        
printf("Empty");
}    
while(temp!=NULL)    
{        
if(temp->next!=NULL)        
{            
printf("LIST is %d-> ",temp->data);
}        
else
{            
printf("%d->NULL\n",temp->data);        
}        
temp=temp->next;    
}
}
**************************************Pranthisies********************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define SIZE 20

struct stack
{
	int capacity;
	int top;
	char *arr;
};

struct stack *create_stack(int cap)
{
	struct stack *s;
	s=malloc(sizeof(struct stack));
	s->capacity=cap;
	s->top=-1;
	s->arr=(char *)malloc(sizeof(char)* cap);
	return s;
}

void push(struct stack *s, char data)
{
	if(s->top==-1)
	{
		s->top=0;
		s->arr[s->top]=data;
	}
	else if(s->top== s->capacity-1)
	{
		printf("Overflow\n");
	}
	else
	{
		s->top+=1;
		s->arr[s->top]=data;
	}
}

char pop(struct stack *s)
{
	char data;
	if(s->top==-1)
	{
		printf("stack is empty\n");
	}
	else
	{
		data=s->arr[s->top];
		s->top-=1;
	}
	return data;
}

int match(char a, char b)
{
	if(a=='(' && b==')')
	{
		return 1;
	}
	if(a=='[' && b==']')
	{
		return 1;
	}
	if(a=='{' && b=='}')
	{
		return 1;
	}
	return 0;
}

int multi_parenthis(struct stack *s, char *exp)
{
	char popch;
	for(int i=0; exp[i]!='\0'; i++)
	{
		if(exp[i]=='{' || exp[i]=='(' || exp[i]=='[')
		{
			push(s,exp[i]);
		}
		else if(exp[i]=='}' || exp[i]==')' || exp[i]==']')
		{
			if(s->top==-1)
			{
				return 0;
			}
			popch=pop(s);
			if(!match(popch, exp[i]))
			{
				return 0;
			}
		}
	}

	if(s->top==-1){
		return 1;
	}
	else{
		return 0;
	}
}

int main()
{
	struct stack *s1;
	s1=create_stack(10);
	char exp[SIZE];

	//char *exp="{7-(3-2)+[8+(99-5)]}";

	printf("\nEnter an expression:\n");
	gets(exp); //Taking the expression to be checked from user

	if(multi_parenthis(s1,exp)!=1)
		printf("Parenthesis are Not Balanced\n");
	else
		printf("Parenthesis are Balanced\n");
		return 0;
}
**************************Binary tree*****************************************
#include<stdio.h>
#include<malloc.h>

struct node {
    int data;
    struct node *left;
    struct node *right;
};


struct node* createNode(int data) {
    // this function will return the pointer for the new node
    struct node *newNode= (struct node *)malloc(sizeof(struct node));
    newNode->data= data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

void preorder(struct node *root) {
    if (root != NULL) {
        printf("%d\n", root->data);
        preorder(root->left);
        preorder(root->right);
    }
    else
        return;
}

void inorder(struct node *root) {
    if(root != NULL)
    {
        inorder(root->left);
        printf("%d\n", root->data);
        inorder(root->right);
    }
    else
    return;
}

void postorder(struct node *root) {
    if(root != NULL)
    {
        postorder(root->left);
        postorder(root->right);
        printf("%d\n",root->data);
    }
    else
    return;
}

void main() {
    struct node *root= createNode(5);  // create root node

    // children to root node
    root->left= createNode(7);
    root->right= createNode(9);

    // grendchildren of root node
    root->left->left= createNode(11);
    root->left->right= createNode(12);
    root->right->left= createNode(19);
    root->right->right= createNode(18);

    printf("PRE-ORDER: \n");
    preorder(root);

    printf("IN-ORDER: \n");
    inorder(root);

    printf("POST-ORDER: \n");
    postorder(root);
}
*****************************************linkEDLIST*****************************
#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *next;
}*head,*tail,*temp,*new_node;

char ch;

void insert();
void insert_at_front();
void insert_at_end();
void insert_after_node();
void display();
void delete();
void del_from_front();
void del_from_end();
void del_after_node();
void displayq(int);
void search();
void count();
void reverse();


int main()
{
    int choice=0;
    while(choice<12)
    {
        system("cls");
        printf("\n--SINGLY LINKED LIST OPERATIONS--\n");
        printf("\n 1-> Insert node/s");
        printf("\n 2-> Delete node");
        printf("\n 3-> Display");
        printf("\n 4-> Search a node");
        printf("\n 5-> Count the no.of nodes");
        printf("\n 6-> Reverse the Linked List");
        //printf("\n 7-> Middle Element");
        //printf("\n 8-> Sort the Linked List");
        //printf("\n 9-> Remove Duplicates from Sorted List");
        //printf("\n 10-> Check if List is palindrome");
        //printf("\n 11-> Remove Nth node from end");
        printf("\n 12-> Exit");
        printf("\n\nEnter your choice : ");
        scanf("%d",&choice);
        switch(choice)  //switch case statements.
        {
            case 1: insert();break;
            case 2: delete();break;
            case 3: display();break;
            case 4: search(); break;
            case 5: count(); break;
            case 6: reverse(); break;
            //case 7: middle(); break;
            //case 8: sort(); break;
            //case 9: rem_dup(); break;
            //case 10: palin(); break;
            //case 11: remnth(); break;
            default: printf("\nProgram ended\n\nThankyou MSIS, MAHE, MAIPAL!"); //program ends
        }
    }
    return 0;
}

void reverse()
{
    if(head==NULL)
    {
        printf("\nThe List is empty!\n");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
        return ;
    }
    struct node *prev_node,*curr_node,*next_node;
    prev_node=NULL;
    curr_node=next_node=head;
    while(next_node!=NULL)
    {
        next_node=next_node->next;
        curr_node->next=prev_node;
        prev_node=curr_node;
        curr_node=next_node;
    }
    temp=head;
    head=tail;
    tail=temp;
    printf("\nThe Linked List is successfully reversed!\n");
    printf("\nPress 'y' to continue : ");
    scanf(" %c",&ch);
    return ;
}

void count()
{
    int num=0;
    temp=head;
    if(temp==NULL)
    {
        printf("\nThe List is empty!");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
        return ;
    }
    while(temp!=NULL)
    {
        num++;
        temp=temp->next;
    }
    printf("\nThe total no.of nodes in the List is : %d",num);
    printf("\nPress 'y' to continue : ");
    scanf(" %c",&ch);
    return;
}

void search()
{
    int ele;
    temp=head;
    if(temp==NULL)
    {
        printf("\nThe List is empty!");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
        return ;
    }
    printf("\nEnter the value of the node to search : ");
    scanf("%d",&ele);
    while(temp!=NULL)
    {
        if(ele==temp->data)
        {
            printf("\n--Element found!--\n");
            displayq(ele);
            printf("\nPress 'y' to continue : ");
            scanf(" %c",&ch);
            return ;
        }
        temp=temp->next;
    }
    printf("\n--Element not found!--");
    printf("\nPress 'y' to continue : ");
    scanf(" %c",&ch);
    return ;
}

void displayq(ele)
{
    temp=head;
    while(temp!=NULL)
    {
        if(temp->data==ele && temp==tail)
        {
            printf(" *(%d)* -> NULL",temp->data);
        }
        else if(temp->data==ele)
        {
            printf(" *(%d)* -> ",temp->data);
        }
        else if(temp==tail)
        {
            printf(" %d -> NULL",temp->data);
        }
        else
        {
            printf(" %d ->",temp->data);
        }
        temp=temp->next;
    }
}

void delete()
{
    int choice=0;
    while(choice<4)
    {
        system("cls");
        printf("\n--DELETION OF NODE--\n");
        printf("\n 1-> Delete from the beginning");
        printf("\n 2-> Delete from the end");
        printf("\n 3-> Delete specific node");
        printf("\n 4-> Exit");
        printf("\nhead=%d and tail=%d",head,tail);
        printf("\nEnter your choice : ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1: del_from_front();break;
            case 2: del_from_end();break;
            case 3: del_after_node(); break;
            default: break;
        }
    }
}

void del_after_node()
{
    temp=head;
    if(temp==NULL)
    {
        printf("\nThe List is empty");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
        return ;
    }
    int value;
    printf("\nEnter the value of node to delete : ");
    scanf("%d",&value);
    if(head==tail)
    {
        if(value!=temp->data)
        {
            printf("\nElement not present in the List");
            printf("\nPress 'y' to continue : ");
            scanf(" %c",&ch);
            return ;
        }
        else
        {
            printf("\nElement deleted is : %d",temp->data);
            head=NULL; tail=NULL;
            free(temp);
            printf("\nPress 'y' to continue : ");
            scanf(" %c",&ch);
            return ;
        }
    }
    if(value==temp->data)
    {
        del_from_front();
        return ;
    }
    while(temp->next->data!=value)
    {
        temp=temp->next;
        if(temp==NULL)
        {
            printf("\nThe element is not present in the List");
            printf("\nPress 'y' to continue : ");
            scanf(" %c",&ch);
            return ;
        }
    }
    if(temp->next->next==NULL)
    {
        del_from_end();
        return ;
    }
    struct node* y;
    y=temp->next;
    temp->next=temp->next->next;
    printf("\nThe element deleted is : %d",y->data);
    y->next=NULL;
    free(y);
    printf("\nPress 'y' to continue : ");
    scanf(" %c",&ch);

}
void del_from_end()
{
    temp=head;
    if(temp==NULL)
    {
        printf("\nThe List is empty!");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
        return ;
    }
    if(head==tail)
    {
        printf("\nThe element deleted is : %d",temp->data);
        free(temp);
        head=NULL;
        tail=NULL;
        printf("\nElement deleted successfully!\n");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
        return ;
    }
    while(temp->next!=tail)
    {
        temp=temp->next;
    }
    printf("\nThe element deleted is %d",tail->data);
    free(tail);
    tail=temp;
    tail->next=NULL;
    printf("\nElement deleted successfully!\n");
    printf("\nPress 'y' to continue : ");
    scanf(" %c",&ch);
}
void del_from_front()
{
    temp=head;
    if(temp==NULL)
    {
        printf("\nThe List is empty!");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
        return ;
    }
    if(head==tail)
    {
        printf("\nThe element deleted is : %d",temp->data);
        free(temp);
        head=NULL;
        tail=NULL;
        printf("\nElement deleted successfully!\n");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
        return ;
    }
    head=head->next;
    printf("\nThe element deleted is : %d",temp->data);
    temp->next=NULL;
    free(temp);
    printf("\nElement deleted successfully!\n");
    printf("\nPress 'y' to continue : ");
    scanf(" %c",&ch);
}

void display()
{
    temp=head;
    if(temp==NULL)
    {
        printf("\nThe List is empty");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
        return ;
    }
    printf("\nThe Linked List is : \n");
    while(temp!=NULL)
    {
        if(temp->next!=NULL)
        {
            printf(" %d ->",temp->data);
        }
        else
        {
            printf(" %d -> NULL.",temp->data);
        }
        temp=temp->next;
    }
    printf("\nPress 'y' to continue : ");
    scanf(" %c",&ch);
}

void insert()
{
    int choice=0;
    while(choice<4)
    {
        system("cls");
        printf("\n--INSERTION OF NODE--\n");
        printf("\n 1-> Insert at Beginning/Front");
        printf("\n 2-> Insert at End");
        printf("\n 3-> Insert after Node");
        printf("\n 4-> Exit");
        printf("\n\nEnter your choice : ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1: insert_at_front();break;
            case 2: insert_at_end(); break;
            case 3: insert_after_node(); break;
            default: break;
        }
    }
}

void insert_at_front()
{
    new_node=(struct node*)malloc(sizeof(struct node));
    printf("\nEnter the data : ");
    scanf("%d",&new_node->data);
    new_node->next=NULL;
    if(head==NULL)
    {
        head=new_node;
        tail=new_node;
    }
    else
    {
        new_node->next=head;
        head=new_node;
    }
    printf("\nElement inserted successfully!");
    printf("\nPress 'y' to continue : ");
    scanf(" %c",&ch);
}
void insert_at_end()
{
    new_node=(struct node*)malloc(sizeof(struct node));
    printf("\nEnter the data : ");
    scanf("%d",&new_node->data);
    new_node->next=NULL;
    if(tail==NULL)
    {
        head=new_node;
        tail=new_node;
    }
    else
    {
        tail->next=new_node;
        tail=new_node;
    }
    printf("\nElement inserted successfully!");
    printf("\nPress 'y' to continue : ");
    scanf(" %c",&ch);
}
void insert_after_node()
{
    int value;
    if(head==NULL)
    {
        printf("\n--List is empty--");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
        return ;
    }
    else
    {
        printf("\nInsert the node after which you want to insert the node : ");
        scanf("%d",&value);
        temp=head;
        while(temp->data!=value)
        {
            temp=temp->next;
            if(temp==NULL)
            {
                printf("\nElement is not present");
                printf("\nPress 'y' to continue : ");
                scanf(" %c",&ch);
                return ;
            }
        }
        new_node=(struct node*)malloc(sizeof(struct node));
        printf("\nInsert the data : ");
        scanf("%d",&new_node->data);
        new_node->next=temp->next;
        temp->next=new_node;
        printf("\nElement inserted successfully!");
        printf("\nPress 'y' to continue : ");
        scanf(" %c",&ch);
    }
}
Footer


